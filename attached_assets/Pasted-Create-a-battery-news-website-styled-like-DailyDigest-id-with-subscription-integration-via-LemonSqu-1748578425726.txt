Create a battery news website styled like DailyDigest.id, with subscription integration via LemonSqueezy, admin article management (free vs premium), and full access control. 
________________________________________
‚ö°Ô∏è Battery News Website with Subscription & Admin Management
________________________________________
üèóÔ∏è Website Architecture & Tech Stack
‚Ä¢	Frontend: React or Next.js for a modern, responsive UI similar to DailyDigest.id.
‚Ä¢	Backend: Node.js with Express or a serverless backend (e.g., Replit‚Äôs built-in backend) to handle API requests.
‚Ä¢	Database: Use a simple database like SQLite or MongoDB to store articles, users, and subscription status.
‚Ä¢	Authentication: Implement user authentication (email/password or OAuth) to manage subscribers and admins.
‚Ä¢	Subscription: Integrate LemonSqueezy for subscription payments and webhook handling.
‚Ä¢	Hosting: Deploy on Replit with continuous deployment.
________________________________________
üé® UI/UX Design
‚Ä¢	Homepage: Clean, minimalist layout with a list of articles, showing title, snippet, date, and author.
‚Ä¢	Article List: Articles marked with badges:
‚Ä¢	üîì Free articles
‚Ä¢	üîí Premium articles (subscription required)
‚Ä¢	Article Page:
‚Ä¢	Free articles show full content.
‚Ä¢	Premium articles show teaser (first few paragraphs) with a call-to-action to subscribe.
‚Ä¢	Subscription Page: Simple page explaining subscription benefits and payment via LemonSqueezy.
‚Ä¢	Admin Dashboard: Secure admin panel to create, edit, and publish articles, with a toggle to mark articles as free or premium.
________________________________________
üîë Features & Functionalities
1. Article Management
‚Ä¢	Articles have fields: id, title, content, author_id, published, is_premium, created_at, updated_at.
‚Ä¢	Admins can create/edit articles and toggle is_premium to mark premium content.
‚Ä¢	Articles default to free unless marked premium.
2. User Roles & Authentication
‚Ä¢	Admin: Can manage articles and mark premium/free.
‚Ä¢	Subscriber: Has access to premium content.
‚Ä¢	Guest/Non-subscriber: Can only access free articles and see teasers for premium.
3. Subscription Integration with LemonSqueezy
‚Ä¢	Use LemonSqueezy‚Äôs API and webhooks to:
‚Ä¢	Handle subscription payments.
‚Ä¢	Update user subscription status in your database.
‚Ä¢	Protect premium content by checking subscription status before serving full content.
4. Access Control Logic
User Type	Access to Free Articles	Access to Premium Articles
Guest (not logged in)	‚úÖ Full access	‚ùå Redirect to subscribe/login
Logged-in Non-subscriber	‚úÖ Full access	‚ùå Prompt to subscribe
Logged-in Subscriber	‚úÖ Full access	‚úÖ Full access
‚Ä¢	Backend enforces access control to prevent unauthorized access.
‚Ä¢	Frontend shows teaser and subscription prompts for premium articles.
________________________________________
üõ†Ô∏è Implementation Details & Code Snippets
Article Schema Example (MongoDB)
js
const ArticleSchema = new mongoose.Schema({
  title: String,
  content: String,
  author_id: mongoose.Schema.Types.ObjectId,
  published: Boolean,
  is_premium: { type: Boolean, default: false },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now }
});
Admin Article Form Snippet (React)
jsx
<label>
  <input
    type="checkbox"
    checked={isPremium}
    onChange={() => setIsPremium(!isPremium)}
  />
  Mark as Premium Article (Subscription Required)
</label>
Backend Access Control Middleware (Express.js)
js
function checkSubscription(req, res, next) {
  const article = req.article; // fetched article
  const user = req.user; // authenticated user

  if (!article.is_premium) {
    return next(); // free article, allow access
  }

  if (!user) {
    return res.status(401).json({ message: 'Please log in to access premium content.' });
  }

  if (!user.isSubscribed) {
    return res.status(403).json({ message: 'Subscription required to access this article.' });
  }

  next();
}
________________________________________
üîó LemonSqueezy Integration Steps
1.	Create a LemonSqueezy account and set up your subscription product.
2.	Use LemonSqueezy API to create checkout links for subscriptions.
3.	Implement webhook endpoint on your backend to listen for subscription events (e.g., new subscription, cancellation).
4.	Update user subscription status in your database based on webhook events.
5.	Protect premium content by checking subscription status before serving.
________________________________________
üìã Summary Table
Feature	Description	Implementation Notes
Article Management	Create/edit articles with free/premium toggle	Admin dashboard with checkbox toggle
User Authentication	Login/signup for users and admins	JWT or session-based auth
Subscription Integration	LemonSqueezy for payments and subscription status	API + webhook handling
Access Control	Restrict premium content to subscribers	Backend middleware + frontend UI hints
UI Design	Clean, minimalist, DailyDigest.id inspired	React/Next.js with badges and teasers

